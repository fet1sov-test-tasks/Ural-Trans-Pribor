import { Client, QueryResult } from 'pg';
import * as config from './config';

const client = new Client({
    host: config.databaseConfig.host,
    port: config.databaseConfig.port,
    database: config.databaseConfig.name,
    user: config.databaseConfig.user,
    password: config.databaseConfig.pass,
});

export async function connectDatabase()
{
    await client.connect();

    await client.query(`
    CREATE TABLE IF NOT EXISTS files
    (
        id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
        title VARCHAR(50) NOT NULL,
        secret VARCHAR NOT NULL,
        pdf_data VARCHAR NOT NULL,
        CONSTRAINT files_pkey PRIMARY KEY (id)
    );
    `);
    console.log("\x1b[42m\x1b[30mDATABASE\x1b[0m \x1b[90m" + "Successfully connected" + "\x1b[0m");
}

export async function disconnectDatabase() {
    await client.end();   
}

export async function fetchFileList()
{
    let fileList: { id: number, title: string, secret: string, pdf_data: string }[] = [];

    const fetchingQuery = {
        text: 'SELECT * FROM files',
        rowMode: 'object',
    }
    const result = await client.query(fetchingQuery);
    console.log("\x1b[42m\x1b[30mDATABASE\x1b[0m \x1b[90m" + " Proccessing file list fetching\x1b[0m");

    fileList = result.rows;

    return fileList;
}

export async function fetchFileById(fileId: number)
{
    const fetchingQuery = {
        text: 'SELECT * FROM files WHERE id = $1',
        values: [fileId],
        rowMode: 'object',
    }
    const { rows } =  await client.query(fetchingQuery);
    return rows[0];
}

export async function getFileBySecret(secret: string)
{
    const fetchingQuery = {
        text: 'SELECT * FROM files WHERE secret = $1',
        values: [secret],
        rowMode: 'object',
    }
    const { rows } =  await client.query(fetchingQuery);

    if (rows[0] != null)
    {
        return rows[0].pdf_data;
    } else {
        return null
    }
}

export async function editFileData(fileId: number, fileName: string, fileSecret: string, fileData: string)
{
    let result : QueryResult = null;

    const existQuery = {
        text: 'SELECT * FROM files WHERE id=$1',
        values: [fileId],
    }
    const existResult = await client.query(existQuery);
    if (existResult.rows.length > 0)
    {
        console.log("\x1b[42m\x1b[30mDATABASE\x1b[0m \x1b[90m" + " Updating file data in database\x1b[0m");
        const updateQuery = {
            text: fileData.length !== 0 ? 'UPDATE files SET title=$1, secret=$2, pdf_data=$3 WHERE id=$4' : 'UPDATE files SET title=$1, secret=$2 WHERE id=$3',
            values: fileData.length !== 0 ? [fileName, fileSecret, Buffer.from(fileData), fileId] : [fileName, fileSecret, fileId],
        }
        result = await client.query(updateQuery);
    }

    return result;
}

export async function uploadNewFile(fileName: string, fileSecret: string, fileData: string)
{
    let result : QueryResult = null;

    const existQuery = {
        text: 'SELECT * FROM files WHERE title=$1',
        values: [fileName],
    }
    const existResult = await client.query(existQuery);
    if (existResult.rows.length === 0)
    {
        console.log("\x1b[42m\x1b[30mDATABASE\x1b[0m \x1b[90m" + " Inserting new file in database\x1b[0m");
        const insertQuery = {
            text: `INSERT INTO files (title, secret, pdf_data) VALUES($1, $2, $3)`,
            values: [fileName, fileSecret, Buffer.from(fileData)],
        }
        result = await client.query(insertQuery);
    }
    return result;
}

export async function deleteFile(fileId: number)
{
    const deleteQuery = {
        text: `DELETE FROM files WHERE id=${fileId}`,
    }
    const result = await client.query(deleteQuery);
    console.log("\x1b[42m\x1b[30mDATABASE\x1b[0m \x1b[90m" + " Deleting row from database\x1b[0m");
    return result;
}